@startuml
'https://plantuml.com/class-diagram

class CasillaDialog
class ArbolGenealogicoController
class EscenarioInicioController
class EscenarioJugarController
class EscenarioPrincipalController
class EscenariosController

class CasillaDialog{
-sliderBasico: Slider
-sliderNormal: Slider
-sliderAvanzado: Slider
-sliderAgua: Slider
-sliderComida: Slider
-sliderMontanas: Slider
-sliderCofres: Slider
-sliderBibliotecas:Slider
-sliderPozos: Slider
-btnCancel: Button
-btnOk: Button
-casilla: Casilla
-partida: Partida
+CasillaDialog(casilla: Casilla, partida: Partida)
-actualizarDatos()
-colocarIndividuos(valor: int, rango: int)
}

class ArbolGenealogicoController{
+paneArbol: Pane
-controladorEscenarios: EscenariosController
-listaIndividuos: ListaDoblementeEnlazada<Individuo>
-btnEnd: Button
+salir()
+setControladorEscenarios(controladorEscenarios: EscenariosController)
+mostrarIndividuos(partida: Partida)
-mostrarIndividuo(individuoActual: Individuo, coordenadasAnteriores: Coordenadas, padre: Boolean, numero: int, derecha: Boolean, inicial: Boolean)
-crearCirculoIndividuo(individuo: Individuo): Circle
}

ArbolGenealogicoController <-- Coordenadas

class Coordenadas{
-x: double
-y: double
+Coordenadas(x: double, y: double)
+getX(): double
+getY(): double
}


class EscenarioInicioController{
-controladorEscenarios: EscenariosController
-escenarioJugar: EscenarioJugarController
-btnCargarPartida: Button
-btnNuevaPartida: Button
-lblStart: Label
+cargarPartida()
+nuevaPartida()
+setControladorEscenarios(controlador: EscenariosController)
}

class EscenarioJugarController{
-pruebas = true: Boolean
-lblTurno: Label
-sliderVelocidad: Slider
-sliderVida: Slider
-sliderClonacion: Slider
-sliderReproduccion: Slider
-sliderBasico: Slider
-sliderNormal: Slider
-sliderAvanzado: Slider
-sliderAgua: Slider
-sliderComida: Slider
-sliderMontana: Slider
-sliderCofre: Slider
-sliderBiblioteca: Slider
-sliderPozo: Slider
-sliderTiempoActividad: Slider
-sliderColumnas: Slider
-sliderFilas: Slider
-bucle: Bucles
-partida: Partida
-tablero: GridPane
-velocidad = 50 : int
-tableroCreado = false: Boolean
-estructuraDeDatos: EstructuraDeDatos
-controladorEscenarios: EscenariosController
-paneTablero: Pane
-btnStart: Button
-btnPausa: Button
-btnEnd: Button
-btnCaracteristicas: Button
-lblColumnas: Label
-lblVelocidad: Label
-lblFilas: Label
-btnRestablecerTablero: Button
-btnGuardar: Button
-btnCargarPartida: Button
+animationTimer: AnimationTimer
+aceptarTablero()
+cambiarVelocidad()
-start()
-crearTablero()
+mostrarCasillas()
+limpiarCasillas()
-mostrarContenidoCasilla(casilla: Casilla)
-crearVistaElemento(elemento: Elemento, i: int): Rectangle
-crearVistaIndividuo(individuo: Individuo, i: int)
-eliminarTablero()
-crearPartida()
-validarInicioPartida(): Boolean
-desabilitarSliders(a: Boolean)
-crearPruebas(casilla: Casilla)
-colocarIndividuos(casilla: Casilla, rango: int)
+restablecerTablero()
+salir()
-pause()
-endGame()
-guardar()
+cargar()
+changeStateOfLabelColumnas()
+changeStateOfLabelFilas()
+changeStateOfLabelVelocidad()
+getTamanoIndividuos(): double
+getTamanoElementos(): double
+colorIndividuo(individuo: Individuo, circulo: Circle)
+colorEelemento(elemento: Elementos, rectangle: Rectangle)
+setControladorEscenarios(controlador: EscenariosController)
+initialize()
}

class EscenarioPrincipalController{
}

class EscenariosController{
-stagePrincipal: Stage
-borderPane: BorderPane
+EscenariosController(stage: Stage)
+cargarEscenario()
+cargarEscenarioInicio()
+cargarEscenarioJugar()
+cargarArbolFinal(partida: Partida)
}
@enduml