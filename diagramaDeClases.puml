@startuml
'https://plantuml.com/class-diagram

class CasillaDialog
class ArbolGenealogicoController
class EscenarioCargarController
class EscenarioInicioController
class EscenarioJugarController
class EscenarioPrincipalController
class EscenariosController

class Partida
class Bucles
class Elementos
class Individuo
class Casilla
class PartidaCasilla

class IndividuoBasico
class IndividuoNormal
class IndividuoAvanzado

class Agua
class Comida
class Montaña
class Cofre
class Biblioteca
class Pozo

Partida <|-- Bucles
Partida <|-- Elementos
Partida <|-- Individuo
Partida <|-- Casilla
Partida <|-- PartidaCasilla

class Partida{
-MaximosIndividuos = 3: int
-turno: int
-probReproduccion: int
-probClonacion: int
-id: int
-turnosVida: int
-numeroIndividuosBasicos: int
-numeroIndividuosNormal: int
-numeroIndividuosAvanzados: int
-agua: int
-comida: int
-montana: int
-cofre: int
-biblioteca: int
-pozo: int
-tiempoActividad: int
-columnas: int
-filas: int
-listaIndividuos: List<Individuo>
-listaElementos: List<Elementos>
-listaCasillas: List<Casilla>
+Partida(probReproduccion: int, probClonacion:int, turnosVida: int)
+Partida(probReproduccion: int, probClonacion: int, turnosVida: int, numeroIndividuosBasicos: int, numeroIndividuosNormal: int, numeroIndividuosAvanzados: int, filas: int, columnas: int)
+PartidaprobReproduccion: int, probClonacion: int, turnosVida: int, numeroIndividuosBasicos: int, numeroIndividuosNormal: int, numeroIndividuosAvanzados: int, agua: int, comida: int, montana: int, cofre: int, biblioteca: int, pozo: int,filas: int, columnas: int)
+Partida()
+getTurno(): int
+setTurno(turno: int)
+getMaximosIndividuos(): int
+getProbReproduccion(): int
+getProbClonacion(): int
+getId(): int
+setId(id: int)
+getTurnosVida(): int
+getListaIndividuos(): List<Individuo>
+getNumeroIndividuosBasicos(): int
+setNumeroIndividuosBasicos(numeroIndividuosBasicos: int)
+getNumeroIndividuosNormal(): int
+setNumeroIndividuosNormal(numeroIndividuosNormal: int)
+getNumeroIndividuosAvanzado(): int
+setNumeroIndividuosAvanzado(numeroIndividuosAvanzado: int)
+getAgua(): int
+setAgua(agua: int)
+getComida(): int
+setComida(comida: int)
+getMontana(): int
+setMontana(montana: int)
+getCofre(): int
+setCofre(cofre: int)
+getBiblioteca(): int
+setBiblioteca(biblioteca : int)
+getPozo(): int
+setPozo(pozo: int)
+getListaElementos(): List<Elementos>
+getTiempoActividad(): int
+setColumnas(columnas: int)
+getColumnas(): int
+setFilas(filas: int)
+getFilas(): int
+setListaCasillas(listaCasillas: List<Casilla>)
+getListaCasillas(): List<Casilla>
+crearBasico(): IndividuoBasico
+crearNormal(): IndividuoNormal
+crearAvanzado(): IndividuoAvanzado
+individuosInicio()
+crearAgua(): Agua
+crearComida(): Comida
+crearBiblioteca(): Biblioteca
+crearMontana(): Montaña
+crearTesoro(): Tesoro
+crearPozo(): Pozo
+elementosPrincipio()
+moverBasico(): Casilla
+moverNormal(): Casilla
+moverIndividuo(individuo: Individuo)
+modificarId()
+modificarTurno()
+filaAleatoria(): int
+columnaAleatoria(): int
+casillaAleatoria(): int
+casillaAleatoria(): Casilla
getIndividuosTotales(): int
}

Individuo <|-- IndividuoBasico
Individuo <|-- IndividuoNormal
Individuo <|-- IndividuoAvanzado

class Individuo{
#id: int
#generacion: int
-turnosVida: int
-probReproduccion: int
-probClonacion: int
-probMuerte: int
#rango: int
-padres: List<Individuo>
-hijos: List<Individuo>
-individuos: List<Individuo>
-casilla: Casilla
+Individuo()
+Individuo(id: int, generacion: int, turnosVida: int, probReproduccion: int, probClonacion: int)
+Individuo(id: int, turnosVida: int, probReproduccion: int, probClonacion: int)
+Individuo(id: int, generacion: int, turnosVida: int, probReproduccion: int, probClonacion: int, rango: int)
+getId(): int
+setId(id: int)
+getGeneracion(): int
+setGeneracion(generacion: int)
+getTurnosVida(): int
+setTurnosVida(turnosVida: int)
+getProbReproduccion(): int
+setProbReproduccion(probReproduccion: int)
+getProbClonacion(): int
+setProbClonacion(probClonacion: int)
+setProbMuerte(probReproduccion: int)
+setProbabilidadMuerte(probMuerte: int)
+getRango(): int
+setRango(rango: int)
+getPadres(): List<Individuo>
+addPadre(padre: Individuo)
+getHijos(): List<Individuo>
+addHijo(hijo: Individuo)
+getIndividuos(): List<Individuo>
+addIndividuo(individuo: Individuo)
+modificarReprod()
+modificarClonacion()
+modificarTurnosVida()
+setCasilla(casilla: Casilla)
+getCasilla(): Casilla
+compareTo(o: Individuo): int
}

class IndividuoBasico{
-rango: int = 1
+IndividuoBasico()
+IndividuoBasico(id: int, generacion: int, turnosVida: int,
probReproduccion: int, probClonacion: int)
+IndividuoBasico(id: int, turnosVida: int,
probReproduccion: int, probClonacion: int)
+getRango(): int
+reproducir(): IndividuoBasico
}

class IndividuoNormal{
-rango: int = 2
+IndividuoNormal()
+IndividuoNormal(id: int, generacion: int, turnosVida: int,
probReproduccion: int, probClonacion: int)
+IndividuoNormal(id: int, turnosVida: int,
probReproduccion: int, probClonacion: int)
+getRango(): int
+reproducir(): IndividuoNormal
}

class IndividuoAvanzado{
-rango: int = 3
+IndividuoAvanzado()
+IndividuoAvanzado(id: int, generacion: int, turnosVida: int,
probReproduccion: int, probClonacion: int)
+IndividuoAvanzado(id: int, turnosVida: int,
probReproduccion: int, probClonacion: int)
+getRango(): int
+reproducir(): IndividuoAvanzado
}

Elementos <|-- Agua
Elementos <|-- Comida
Elementos <|-- Montaña
Elementos <|-- Cofre
Elementos <|-- Biblioteca
Elementos <|-- Pozo

class Elementos{
-tiempoActividad: int
-casilla: Casilla
#type: int
+Elementos(tiempoActividad: int, type: int)
+Elementos()
+getTiempoActividad(): int
+setTiempoActividad(tiempoActividad: int)
+getCasilla(): Casilla
+setCasilla(Columna: int, Fila: int)
+setCasilla2(casilla: Casilla)
+getType(): int
+compareTo(o: Elementos): int
}

class Agua{
-type: int = 0
-alteracion: int = 2
+Agua(tiempoActividad: int, type: int)
+Agua()
+getAlteracion(): int
+setAlteracion(alteracion: int)
+getType(): int
}

class Comida{
-type: int = 1
-alteracion: int = 1
+Comida(tiempoActividad: int, type: int)
+Comida()
+getAlteracion(): int
+setAlteracion(alteracion: int)
+getType(): int
}

class Montaña{
-type: int = 3
-alteracion: int = -2
+Montaña(tiempoActividad: int, type: int)
+Montaña()
+getAlteracion(): int
+setAlteracion(alteracion: int)
+getType(): int
}

class Cofre{
-type: int = 4
-alteracion: int
+Tesoro(tiempoActividad: int, type: int)
+Tesoro()
+getAlteracion(): int
+setAlteracion(valor: int)
+getType(): int
}

class Biblioteca{
-type: int = 2
-alteracion: int
+Biblioteca(tiempoActividad: int, type: int)
+Biblioteca()
+getAlteracion(): int
+setAlteracion(valor: int)
+getType(): int
}

class Pozo{
-type: int = 5
+Pozo()
+getType(): int
}

class Bucles{
-listaIndividuos: ArrayList<Individuo>
-listaElementos: ArrayList<Elementos>
-tablero: ArrayList<Casilla>
-individuo: Individuo
+Bucles()
+Bucles(listaElementos: ArrayList<Elementos>)
+modificarIndividuo(individuo: Individuo, listaIndividuos: List<Individuo>)
+eliminarIndividuo(individuo: Individuo, listaIndividuos: List<Individuo>)
+actualizarIndividuos(listaIndividuos: List<Individuo>)
+modificarElementos(elemento: Elementos)
+eliminarElemento(elemento: Elementos, listaElementos: List<Elementos>)
+actualizarElementos(listaElementos: List<Elementos>)
+moverBasico(): Casilla
+moverNormal(casillaVieja: Casilla): Casilla
+moverIndividuo(individuo: Individuo): Casilla
+individuoMejorado(listaCasillas: List<Casillas>, listaIndividuos: List<Individuo>, listaElementos: List<Elementos>, partida: Partida): Individuo
+individuoConRecurso(individuo: Individuo, elemento: Elementos, partida: Partida): Individuo
+reproducir(a: Individuo, b: Individuo): Individuo
+clonar(individuo: Individuo, partida: Partida): Individuo
+evaluarCapacidadCasilla(casilla: Casilla): int
+evaluarIndividuosCasilla(casilla: Casilla): Individuo
+reordenar(casilla: Casilla): List<Integer>)
+evaluacionFinal(casilla: Casilla)
+aparicionRecurso()
}

Casilla <-- Pane

class Casilla{
-columna: int
-fila: int
-individuosCasilla: List<Individuo>
-individuosIdCasilla: List<Integer>
-elementosCasilla: List<Elementos>
+Casilla()
+Casilla(columna: int, fila: int)
+getElementosCasilla(): List<Elementos>
+setElementosCasilla(elementosCasilla: List<Elementos>)
+addElementosCasilla(elemento: Elementos)
removeElementoCasilla(elemento: Elementos)
+getIndividuosCasilla(): List<Individuo>
+getIndividuosIdCasilla(): List<Integer>
+getIndividuosTotales(): int
+setIndividuosCasilla(listaIndividuos: List<Individuo>)
+addIndividuoCasilla(individuo: Individuo)
+addIndividuoCasilla()
+removeIndividuoCasilla(individuo: Individuo)
+getColumna(): int
+setColumna(columna: int)
+getFila(): int
+setFila(fila: int)
}

class PartidaCasilla{
casilla: Casilla
partida: Partida
+PartidaCasilla()
+PartidaCasilla(casilla: Casilla, partida: Partida)
+getCasilla(): Casilla
+setCasilla(casilla: Casilla)
+getPartida(): Partida
+setPartida(partida: Partida)
}

class CasillaDialog{
-sliderBasico: Slider
-sliderNormal: Slider
-sliderAvanzado: Slider
-sliderAgua: Slider
-sliderComida: Slider
-sliderMontanas: Slider
-sliderCofres: Slider
-sliderBibliotecas:Slider
-sliderPozos: Slider
-btnCancel: Button
-btnOk: Button
-casilla: Casilla
-partida: Partida
-maxIndividuos = 3: int
-maxElementos = 3: int
+CasillaDialog(casilla: Casilla, partida: Partida)
-actualizarDatos()
}

class ArbolGenealogicoController{
+paneArbol: Pane
-controladorEscenarios: EscenariosController
-listaIndividuos: List<Individuo>
-btnEnd: Button
+salir()
+setControladorEscenarios(controladorEscenarios: EscenariosController)
+mostrarIndividuos(listaIndividuos: List<Individuo>)
-mostrarIndividuo()
-crearCirculoIndividuo(individuo: Individuo): Circle
}

ArbolGenealogicoController <-- Coordenadas

class Coordenadas{
-x: double
-y: double
+Coordenadas(x: double, y: double)
+getX(): double
+getY(): double
}

class EscenarioCargarController{
-controladorEscenarios: EscenariosController
-btnJugar: Button
-btnSalir: Button
+jugar()
+salir()
+setControladorEscenarios(controlador: EscenariosController)
}


class EscenarioInicioController{
-controlador: EscenariosController
-btnCargarPartida: Button
-btnNuevaPartida: Button
-lblStart: Label
+cargarPartida()
+nuevaPartida()
+setControladorEscenarios(controlador: EscenariosController)
}

class EscenarioJugarController{
-controladorEscenarios: EscenariosController
-partida: Partida
-bucle: Bucles
-tablero: GridPane
-tableroCreado = false: Boolean
-individuosCreados = false: Boolean
-partidaCreada = false: Boolean
-listaIndividuos: List<Individuo>
-listaCasillas: List<Casilla>
-listaElementos: List<Elementos>
-velocidad = 50 : int
-lblTurno: Label
-lblNumeroIndividuos: Label
-tabPane: TabPane
-paneTablero: Pane
-btnStart: Button
-btnPausa: Button
-btnEnd: Button
-btnCaracteristicas: Button
-tabIndividuos: Tab
-lblClonacion: Label
-lblReproduccion: Label
-lblVida: Label
-sliderClonacion: Slider
-sliderReproduccion: Slider
-sliderVida: Slider
-btnAceptarParIndividuo: Button
-btnRestablecer: Button
-tabTipoIndividuos: Tab
-lblBasico: Label
-lblNormal: Label
-lblAvanzado: Label
-sliderBasico: Slider
-sliderNormal: Slider
-sliderAvanzado: Slider
-btnRestablecerTipoIndividuo: Button
-btnAceptarTipoIndividuo: Button
-tabEntorno: Tab
-sliderAgua: Slider
-sliderComida: Slider
-sliderMontanas: Slider
-sliderCofres: Slider
-sliderBibliotecas: Slider
-sliderPozos: Slider
-sliderTiempoActividad: Slider
-btnAceptarParEntorno: Button
-btnRestablecer1: Button
-tabTablero: Tab
-lblColumnas: Label
-lblVelocidad: Label
-lblFilas: Label
-sliderColumnas: Slider
-sliderFilas: Slider
-sliderVelocidad: Slider
-btnAceptarTablero: Slider
-btnRestablecerTablero: Button
-btnGuardar: Button
-btnCargarPartida: Button
+aceptarParIndividuo()
+aceptarParEntorno()
+aceptarTablero()
+restablecerTablero()
+restablecerIndividuos()
+restablecerEntorno()
+cargarPartida()
+salir()
+animationTimer: AnimationTimer
+handle(now: long)
-start()
-pause()
-endGame()
+guardarObjeto(rutaArchivo: String, objeto: T): <T>
+cargarObjeto(rutaArchivo: String, clase: Class<T>): <T>
-guardar()
-cargar()
-desabilitarSliders(a: Boolean)
+crearTablero(columnas: int, filas: int)
+eliminarTablero()
+cambiarVelocidad()
+changeStateOfLabelColumnas()
+changeStateOfLabelFilas()
+changeStateOfLabelVelocidad()
+crearPartida()
+getTamanoIndividuos(): double
+getTamanoElementos(): double
+mostrarIndividuoCasilla(casilla: Casilla)
+mostrarElementosCasilla(casilla: Casilla)
+mostrarCasillas()
+limpiarCasillas()
+colorIndividuo(individuo: Individuo, circulo: Circle)
+colorEelemento(elemento: Elementos, rectangle: Rectangle)
+setControladorEscenarios(controlador: EscenariosController)
+initialize()
}

class EscenarioPrincipalController{
}

class EscenariosController{
-stagePrincipal: Stage
-borderPane: BorderPane
+EscenariosController(stage: Stage)
+cargarEscenario()
+cargarEscenarioInicio()
+cargarEscenarioJugar()
+cargarEscenarioCarga()
+cargarArbolFinal()
}

@enduml