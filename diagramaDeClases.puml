@startuml
'https://plantuml.com/class-diagram

class CasillaDialog
class ArbolGenealogicoController
class EscenarioCargarController
class EscenarioInicioController
class EscenarioJugarController
class EscenarioPrincipalController
class EscenariosController

class Partida
class Bucles
class Elemento
class Individuo
class Casilla

class Agua
class Comida
class Montaña
class Tesoro
class Biblioteca
class Pozo

Partida <|-- Bucles
Partida <|-- Elemento
Partida <|-- Individuo
Partida <|-- Casilla

class Partida{
-id = 0: int
-maxIndividuos = 3: int
-maxElementos = 3: int
-turno = 0: int
-turnosVida: int
-probClonacion: int
-probReproduccion: int
-numeroIndividuosBasicos: int
-numeroIndividuosNormal: int
-numeroIndividuosAvanzados: int
-agua: int
-comida: int
-montana: int
-cofre: int
-biblioteca: int
-pozo: int
-tiempoActividad: int
-columnas: int
-filas: int
-listaCasillas: ListaEnlazada<Casilla>
+Partida(turnosVida: int, probClonacion: int, probReproduccion: int, numeroIndividuosBasicos: int, numeroIndividuosNormal: int, numeroIndividuosAvanzados: int, agua: int, comida: int, montana: int, cofre: int, biblioteca: int, pozo: int, tiempoActividad: int, columnas: int, filas: int)
+aumentarId()
+getId(): int
+setId(id: int)
+getMaximosIndividuos(): int
+setMaximosIndividuos(maxIndividuos: int)
+getMaximosElementos(): int
+setMaximosElementos(maxElementos: int)
+setColumnas(columnas: int)
+getColumnas(): int
+setFilas(filas: int)
+getFilas(): int
+getTurno(): int
+setTurno(turno: int)
+getTurnosVida(): int
+setTurnosVida(turnosVida: int)
+getProbClonacion(): int
+setProbClonacion(probClonacion: int)
+getProbReproduccion(): int
+setProbReproduccion(probReproduccion: int)
+getListaCasillas(): ListaEnlazada<Casilla>
+aumentarTurno()
-listaIndividuos: ListaDoblementeEnlazada<Individuo>
-listaElementos: ListaDoblementeEnlazada<Elemento>
+fromJson(jsonObject: JsonObject)
+toJson(): JsonObject
+getListaIndividuos(): ListaDoblementeEnlazada<Individuo>
+getNumeroIndividuosBasicos(): int
+setNumeroIndividuosBasicos(numeroIndividuosBasicos: int)
+getNumeroIndividuosNormal(): int
+setNumeroIndividuosNormal(numeroIndividuosNormal: int)
+getNumeroIndividuosAvanzado(): int
+setNumeroIndividuosAvanzado(numeroIndividuosAvanzado: int)
+setListaIndividuos(listaIndividuos: ListaDoblementeEnlazada<Individuo>)
+removeIndividuo(individuo: Individuo)
+removeIndividuo(index: int)
+getAgua(): int
+setAgua(agua: int)
+getComida(): int
+setComida(comida: int)
+getMontana(): int
+setMontana(montana: int)
+getCofre(): int
+setCofre(cofre: int)
+getBiblioteca(): int
+setBiblioteca(biblioteca : int)
+getPozo(): int
+setPozo(pozo: int)
+getListaElementos(): ListaDoblementeEnlazada<Elementos>
+setListaElementos(listaElementos: ListaDoblementeEnlazada<Elementos>)
+getTiempoActividad(): int
//
+setListaCasillas(listaCasillas: List<Casilla>)
+getListaCasillas(): List<Casilla>
+crearBasico(): IndividuoBasico
+crearNormal(): IndividuoNormal
+crearAvanzado(): IndividuoAvanzado
+individuosInicio()
+crearAgua(): Agua
+crearComida(): Comida
+crearBiblioteca(): Biblioteca
+crearMontana(): Montaña
+crearTesoro(): Tesoro
+crearPozo(): Pozo
+elementosPrincipio()
+moverBasico(): Casilla
+moverNormal(): Casilla
+moverAvanzado(): Casilla
+moverIndividuos(individuo: Individuo)
+modificarId()
+modificarTurno()
+filaAleatoria(): int
+columnaAleatoria(): int
+casillaAleatoria(): Casilla
getIndividuosTotales(): int
}

class Individuo{
#id: int
#generacion: int
-turnosVida: int
-probReproduccion: int
-probClonacion: int
-probMuerte: int
#rango: int
#longevidad: int
-casilla: Casilla
-operaciones: ListaSimple<Operacion>
-padres: ListaDoblementeEnlazada<Individuo>
-hijos: ListaDoblementeEnlazada<Individuo>
-individuos: ListaDoblementeEnlazada<Individuo>
+Individuo(id: int, probClonacion: int, probReproduccion: int)
+Individuo(id: int, generacion: int, turnosVida: int, probReproduccion: int, probClonacion: int, rango: int, casilla: Casilla)
+fromJson(jsonObject: JsonObject)
+toJson(): JsonObject
+getId(): int
+setId(id: int)
+getGeneracion(): int
+setGeneracion(generacion: int)
+getTurnosVida(): int
+setTurnosVida(turnosVida: int)
+getProbReproduccion(): int
+setProbReproduccion(probReproduccion: int)
+getProbClonacion(): int
+setProbClonacion(probClonacion: int)
+setProbMuerte(probReproduccion: int)
+setProbabilidadMuerte(probMuerte: int)
+getRango(): int
+setRango(rango: int)
+getLongevidad(): int
+setLongevidad(longevidad: int)
+getPadres(): ListaDoblementeEnlazada<Individuo>
+addPadre(padre: Individuo)
+getHijos(): ListaDoblementeEnlazada<Individuo>
+addHijo(hijo: Individuo)
+getIndividuos(): ListaDoblementeEnlazada<Individuo>
+addIndividuo(individuo: Individuo)
+modificarReprod()
+modificarClonacion()
+modificarTurnosVida()
+setCasilla(casilla: Casilla)
+getCasilla(): Casilla
+addOperation(tipo: String, turno: int)
+getOperaciones(): ListaSimple<Operacion>
+compareTo(o: Individuo): int
}

Elemento <|-- Agua
Elemento <|-- Comida
Elemento <|-- Montaña
Elemento <|-- Cofre
Elemento <|-- Biblioteca
Elemento <|-- Pozo

class Elemento{
-tiempoActividad: int
-casilla: Casilla
#type: int
+Elementos(tiempoActividad: int, type: int)
+getTiempoActividad(): int
+setTiempoActividad(tiempoActividad: int)
+getCasilla(): Casilla
+setCasilla(casilla: Casilla)
+compareTo(o: Elemento): int
}

class Agua{
-alteracion: int = 2
+Agua(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(alteracion: int)
}

class Comida{
-alteracion: int = 1
+Comida(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(alteracion: int)
}

class Montaña{
-alteracion: int = -2
+Montaña(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(alteracion: int)
}

class Tesoro{
-alteracion: int
+Tesoro(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(valor: int)
}

class Biblioteca{
-alteracion: int
+Biblioteca(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(valor: int)
}

class Pozo{
+Pozo(tiempoActividad: int, casilla: Casilla)
}

class Bucles{
-listaIndividuos: ArrayList<Individuo>
-tablero: ArrayList<Casilla>
-individuo: Individuo
-partida: Partida
+Bucles()
+setPartida(partida: Partida)
+eliminarIndividuo(listaIndividuos: List<Individuo>)
+actualizarIndividuos()
+modificarElementos(elemento: Elementos)
+eliminarElemento(elemento: Elementos, listaElementos: List<Elementos>)
+actualizarElementos(listaElementos: List<Elementos>)
+moverIndividuo(individuo: Individuo)
+individuoMejorado(listaCasillas: List<Casillas>, listaIndividuos: List<Individuo>, listaElementos: List<Elementos>, partida: Partida): Individuo
+individuoConRecurso(individuo: Individuo, elemento: Elementos, partida: Partida): Individuo
+reproducir(a: Individuo, b: Individuo): Individuo
+clonar(individuo: Individuo, partida: Partida): Individuo
+evaluarCapacidadCasilla(casilla: Casilla): int
+evaluarIndividuosCasilla(casilla: Casilla): Individuo
+reordenar(casilla: Casilla): List<Integer>)
+evaluacionFinal(casilla: Casilla)
+aparicionRecurso()
}

Casilla <-- Pane

class Casilla{
-completa = true: Boolean
-columna: int
-fila: int
-individuos: ListaEnlazada<Individuo>
-elementos: ListaEnlazada<Elemento>
+Casilla(columna: int, fila: int)
+Casilla(completa: Boolean)
+isCompleta(): Boolean
+setCompleta(completa: Boolean)
+getColumna(): int
+setColumna(columna: int)
+getFila(): int
+setFila(fila: int)
+getIndividuos(): ListaEnlazada<Individuo>
+addIndividuo(individuo: Individuo)
+getElementos(): ListaEnlazada<Elemento>
+addElemento(elemento: Elementos)
-individuosIdCasilla: ListaDoblementeEnlazada<Integer>
+fromJson(jsonObject: JsonObject)
+toJson(): JsonObject

}

class CasillaDialog{
-sliderBasico: Slider
-sliderNormal: Slider
-sliderAvanzado: Slider
-sliderAgua: Slider
-sliderComida: Slider
-sliderMontanas: Slider
-sliderCofres: Slider
-sliderBibliotecas:Slider
-sliderPozos: Slider
-btnCancel: Button
-btnOk: Button
-casilla: Casilla
-partida: Partida
+CasillaDialog(casilla: Casilla, partida: Partida)
-actualizarDatos()
-colocarIndividuos(valor: int, rango: int)
}

class ArbolGenealogicoController{
+paneArbol: Pane
-controladorEscenarios: EscenariosController
-listaIndividuos: ListaDoblementeEnlazada<Individuo>
-btnEnd: Button
+salir()
+setControladorEscenarios(controladorEscenarios: EscenariosController)
+mostrarIndividuos(listaIndividuos: ListaDoblementeEnlazada<Individuo>)
-crearCirculoIndividuo(individuo: Individuo): Circle
}

ArbolGenealogicoController <-- Coordenadas

class Coordenadas{
-x: double
-y: double
+Coordenadas(x: double, y: double)
+getX(): double
+getY(): double
}

class EscenarioCargarController{
-controladorEscenarios: EscenariosController
-controladorEscenarioJugar: EscenarioJugarController
-btnJugar: Button
-btnSalir: Button
-btnPartida: Button
+jugar()
+salir()
+cargar()
+setControladorEscenarios(controlador: EscenariosController)
}


class EscenarioInicioController{
-controladorEscenarios: EscenariosController
-btnCargarPartida: Button
-btnNuevaPartida: Button
-lblStart: Label
+cargarPartida()
+nuevaPartida()
+setControladorEscenarios(controlador: EscenariosController)
}

class EscenarioJugarController{
-pruebas = true: Boolean
-lblTurno: Label
-sliderVelocidad: Slider
-sliderVida: Slider
-sliderClonacion: Slider
-sliderReproduccion: Slider
-sliderBasico: Slider
-sliderNormal: Slider
-sliderAvanzado: Slider
-sliderAgua: Slider
-sliderComida: Slider
-sliderMontanas: Slider
-sliderCofres: Slider
-sliderBibliotecas: Slider
-sliderPozos: Slider
-sliderTiempoActividad: Slider
-sliderColumnas: Slider
-sliderFilas: Slider
-bucle: Bucles
-partida: Partida
-tablero: GridPane
-velocidad = 50 : int
-tableroCreado = false: Boolean

+animationTimer: AnimationTimer
+aceptarTablero()
+cambiarVelocidad()
-start()
-crearTablero()
-mostrarContenidoCasilla(casilla: Casilla)
-crearVistaElemento(elemento: Elemento, i: int): Rectangle
-crearVistaIndividuo(individuo: Individuo, i: int)
-eliminarTablero()
-crearPartida()
-validarInicioPartida(): Boolean
-desabilitarSliders(a: Boolean)
-crearPruebas(casilla: Casilla)
-colocarIndividuos(casilla: Casilla, rango: int)


-individuosCreados = false: Boolean
-partidaCreada = false: Boolean
-listaIndividuos: List<Individuo>
-listaCasillas: List<Casilla>
-listaElementos: List<Elementos>

-lblNumeroIndividuos: Label
-tabPane: TabPane
-paneTablero: Pane
-btnStart: Button
-btnPausa: Button
-btnEnd: Button
-btnCaracteristicas: Button
-tabIndividuos: Tab
-lblClonacion: Label
-lblReproduccion: Label
-lblVida: Label
-btnAceptarParIndividuo: Button
-btnRestablecer: Button
-tabTipoIndividuos: Tab
-lblBasico: Label
-lblNormal: Label
-lblAvanzado: Label
-btnRestablecerTipoIndividuo: Button
-btnAceptarTipoIndividuo: Button
-tabEntorno: Tab
-btnAceptarParEntorno: Button
-btnRestablecer1: Button
-tabTablero: Tab
-lblColumnas: Label
-lblVelocidad: Label
-lblFilas: Label
-btnAceptarTablero: Slider
-btnRestablecerTablero: Button
-btnGuardar: Button
-btnCargarPartida: Button
+aceptarParIndividuo()
+aceptarParEntorno()
+restablecerTablero()
+restablecerIndividuos()
+restablecerEntorno()
+cargarPartida()
+salir()
+handle(now: long)
-pause()
-endGame()
-guardar()
-cargar()
+changeStateOfLabelColumnas()
+changeStateOfLabelFilas()
+changeStateOfLabelVelocidad()
+getTamanoIndividuos(): double
+getTamanoElementos(): double
+mostrarCasillas()
+limpiarCasillas()
+colorIndividuo(individuo: Individuo, circulo: Circle)
+colorEelemento(elemento: Elementos, rectangle: Rectangle)
+setControladorEscenarios(controlador: EscenariosController)
+initialize()
}

class EscenarioPrincipalController{
}

class EscenariosController{
-stagePrincipal: Stage
-borderPane: BorderPane
+EscenariosController(stage: Stage)
+cargarEscenario()
+cargarEscenarioInicio()
+cargarEscenarioJugar()
+cargarEscenarioCargar()
+cargarArbolFinal(listaIndividuos: ListaDoblementeEnlazada<Individuo>)
}

@enduml