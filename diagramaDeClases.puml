@startuml
'https://plantuml.com/class-diagram

class Partida
class Bucles
class Elemento
class Individuo
class Casilla
class Operacion

class Agua
class Comida
class Monta単a
class Tesoro
class Biblioteca
class Pozo

Partida <|-- Bucles
Partida <|-- Elemento
Partida <|-- Individuo
Partida <|-- Casilla

class Partida{
-probabilidadZ = 40: int
-probabilidadEjecucionReproduccion = 75: int
-probabilidadEjecucionClonacion = 75: int
-id = 0: int
-maxIndividuos = 3: int
-maxElementos = 3: int
-turno = 0: int
-turnosVida: int
-probClonacion: int
-probReproduccion: int
-numeroIndividuosBasicos: int
-numeroIndividuosNormal: int
-numeroIndividuosAvanzados: int
-agua: int
-comida: int
-montana: int
-cofre: int
-biblioteca: int
-pozo: int
-tiempoActividad: int
-columnas: int
-filas: int
-listaCasillas: ListaEnlazada<Casilla>
-listaIndividuos: ListaEnlazada<Individuo>
+Partida(turnosVida: int, probClonacion: int, probReproduccion: int, numeroIndividuosBasicos: int, numeroIndividuosNormal: int, numeroIndividuosAvanzados: int, agua: int, comida: int, montana: int, cofre: int, biblioteca: int, pozo: int, tiempoActividad: int, columnas: int, filas: int)
+aumentarId()
+getId(): int
+setId(id: int)
+getMaxIndividuos(): int
+setMaxIndividuos(maxIndividuos: int)
+getMaxElementos(): int
+setMaxElementos(maxElementos: int)
+setColumnas(columnas: int)
+getColumnas(): int
+setFilas(filas: int)
+getFilas(): int
+getTurno(): int
+setTurno(turno: int)
+getTurnosVida(): int
+setTurnosVida(turnosVida: int)
+getProbClonacion(): int
+setProbClonacion(probClonacion: int)
+getProbReproduccion(): int
+setProbReproduccion(probReproduccion: int)
+getListaCasillas(): ListaEnlazada<Casilla>
+getListaIndividuos(): ListaEnlazada<Individuo>
+setListaIndividuos(listaIndividuos: ListaEnlazada<Individuo>)
+addIndividuo(individuo: Individuo)
+aumentarTurno()
+moverBasico(): Casilla
+moverNormal(): Casilla
+moverAvanzado(): Casilla
+getProbabilidadZ(): int
+setProbabilidadZ(probabilidadZ: int)
+colocarIndividuo(casilla: Casilla, rango: int): Individuo
+getProbabilidadEjecucionReproduccion(): int
+setProbabilidadEjecucionReproduccion(probabilidadEjecucionReproduccion: int)
+getProbabilidadEjecucionClonacion: int
+setProbabilidadEjecucionClonacion(probabilidadEjecucionClonacion: int)
+getNumIndividuos(): int
+fromJson(jsonObject: JsonObject)
+toJson(): JsonObject
+getNumeroIndividuosBasicos(): int
+setNumeroIndividuosBasicos(numeroIndividuosBasicos: int)
+getNumeroIndividuosNormal(): int
+setNumeroIndividuosNormal(numeroIndividuosNormal: int)
+getNumeroIndividuosAvanzado(): int
+setNumeroIndividuosAvanzado(numeroIndividuosAvanzado: int)
+getAgua(): int
+setAgua(agua: int)
+getComida(): int
+setComida(comida: int)
+getMontana(): int
+setMontana(montana: int)
+getCofre(): int
+setCofre(cofre: int)
+getBiblioteca(): int
+setBiblioteca(biblioteca : int)
+getPozo(): int
+setPozo(pozo: int)
+getTiempoActividad(): int
+modificarId()
+filaAleatoria(): int
+columnaAleatoria(): int
+casillaAleatoria(): Casilla
}

class Individuo{
#id: int
#generacion: int
-turnosVida: int
-probReproduccion: int
-probClonacion: int
-probMuerte: int
#rango: int
#longevidad: int
-casilla: Casilla
-operaciones: ListaEnlazada<Operacion>
-padres: ListaEnlazada<Individuo>
-hijos: ListaDEnlazada<Individuo>
-individuos: ListaDoblementeEnlazada<Individuo>
+Individuo()
+Individuo(id: int, probClonacion: int, probReproduccion: int)
+Individuo(id: int, generacion: int, turnosVida: int, probReproduccion: int, probClonacion: int, rango: int, casilla: Casilla)
+restarTurnoVida()
+getLongevidad(): int
+sumarLongevidad()
+getProbReproduccion(): int
+setProbReproduccion(probReproduccion: int)
+getProbMuerte(): int
+setProbMuerte(probReproduccion: int)
+getPadres(): ListaEnlazada<Individuo>
+addPadre(padre: Individuo)
+getHijos(): ListaEnlazada<Individuo>
+addHijo(hijo: Individuo)
+fromJson(jsonObject: JsonObject)
+toJson(): JsonObject
+getId(): int
+setId(id: int)
+getGeneracion(): int
+setGeneracion(generacion: int)
+getTurnosVida(): int
+setTurnosVida(turnosVida: int)
+getProbClonacion(): int
+setProbClonacion(probClonacion: int)
+getRango(): int
+setRango(rango: int)
+getIndividuos(): ListaDoblementeEnlazada<Individuo>
+addIndividuo(individuo: Individuo)
+modificarReprod()
+modificarClonacion()
+setCasilla(casilla: Casilla)
+getCasilla(): Casilla
+addOperation(descripcion: String, tipo: String, turno: int)
+getOperaciones(): ListaEnlazada<Operacion>
+compareTo(o: Individuo): int
}

Elemento <|-- Agua
Elemento <|-- Comida
Elemento <|-- Monta単a
Elemento <|-- Cofre
Elemento <|-- Biblioteca
Elemento <|-- Pozo

class Elemento{
-tiempoActividad: int
-casilla: Casilla
-alteracion: int
-probabilidad: int
+Elemento(tiempoActividad: int, type: int)
+getTiempoActividad(): int
+setTiempoActividad(tiempoActividad: int)
+reducirTiempoActividad()
+getCasilla(): Casilla
+setCasilla(casilla: Casilla)
+getAlteracion(): int
+setAlteracion(alteracion: int)
+getProbabilidad(): int
+setProbabilidad(probabilidad: int)
+compareTo(o: Elemento): int
}

class Agua{
-alteracion: int = 2
+Agua(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(alteracion: int)
}

class Comida{
-alteracion: int = 10
+Comida(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(alteracion: int)
}

class Monta単a{
-alteracion: int = -2
+Monta単a(tiempoActividad: int, casilla: Casilla)
+getAlteracion(): int
+setAlteracion(alteracion: int)
}

class Tesoro{
-probabilidad = 10: int
+Tesoro(tiempoActividad: int, casilla: Casilla)
+getProbabilidad: int
+setProbabilidad(probabilidad: int)
}

class Biblioteca{
-probabilidad = 10: int
+Biblioteca(tiempoActividad: int, casilla: Casilla)
+getProbabilidad: int
+setProbabilidad(probabilidad: int)
}

class Pozo{
+Pozo(tiempoActividad: int, casilla: Casilla)
}

class Bucles{
-partida: Partida
+Bucles(partida: Partida)
+moverIndividuos()
+evaluarCasillas()
+evaluarElementosCasilla(casilla: Casilla)
+maxCosasCasilla(casilla: Casilla)
-relacionesIndividuos(casilla: Casilla)
-reproduccion(individuo1: Individuo, individuo2: Individuo, casilla: Casilla): Boolean
-evaluarIndividuoRecurso(individuo: Individuo)
+aparicionRecursos(listaCasillas: ListaDoblementeEnlazada<Casilla>, listaElementos: ListaDoblementeEnlazada<Elemento>): ListaDoblementeEnlazada<Elemento>
}

Casilla <-- Pane

class Casilla{
-completa = true: Boolean
-columna: int
-fila: int
-individuos: ListaEnlazada<Individuo>
-elementos: ListaEnlazada<Elemento>
+Casilla(columna: int, fila: int)
+Casilla(completa: Boolean)
+isCompleta(): Boolean
+setCompleta(completa: Boolean)
+getColumna(): int
+setColumna(columna: int)
+getFila(): int
+setFila(fila: int)
+getIndividuos(): ListaEnlazada<Individuo>
+addIndividuo(individuo: Individuo)
+removeIndividuo(individuo: Individuo)
+getElementos(): ListaEnlazada<Elemento>
+addElemento(elemento: Elementos)
-individuosIdCasilla: ListaDoblementeEnlazada<Integer>
+fromJson(jsonObject: JsonObject)
+toJson(): JsonObject
}

Bucles <-- Operacion
Individuo <-- Operacion

class Operacion{
-turno: int
-descripcion: int
-tipo: int
+Operacion(descripcion: String, turno: int, tipo: int)
+getDescripcion(): String
+getTurno(): int
+getTipo(): int
}

@enduml