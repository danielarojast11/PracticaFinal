@startuml
'https://plantuml.com/class-diagram

class ListaSimple
class ElementoLS

class ListaEnlazada
class ElementoLE

class ListaDoblementeEnlazada
class ElementoLDE

class GrafoOperaciones
class IndividuoPruebaGrafo
class verGrafo
class Operacion

class EstructuraDeDatos

ListaSimple <-- ElementoLS

class ElementoLS{
-data: TipoDato
+getData(): TipoDato
+setData(data: TipoDato): TipoDato
}

class ListaSimple{
-datos: ElementoLS<TipoDato>
-maximo = 3000: int
-numeroElementos: int
+ListaSimple()
+getMaximo(): int
+setMaximo(maximo: int)
+isVacia(): Boolean
+vaciar()
+add(el: ElementoLS<TipoDato>)
+add(o: TipoDato)
+del(position: int)
+getNumeroElementos(): int
+getPosicion(el: ElementoLS<TipoDato>): int
+getPrimero(el: ElementoLS<TipoDato>): TipoDato
+getUltimo(): TipoDato
-getSiguiente(el: ElementoLS<TipoDato>): ElementoLS<TipoDato>
+getElemento(position: int): TipoDato
}

ListaEnlazada <-- ElementoLE

class ElementoLE{
-siguiente: ElementoLE<TipoDato>
-data: TipoDato
+ElementoLE(valor: TipoDato)
#insertarmeEn(el: ElementoLE<TipoDato>)
+getSiguiente():ElementoLE<TipoDato>
+setSiguiente(el: ElementoLE<TipoDato>)
+getData(): TipoDato
+setData(data: TipoDato): TipoDato
}

class ListaEnlazada{
-primero: ElementoLE<TipoDato>
+ListaEnlazada(primero: ElementoLE<TipoDato>)
+ListaEnlazada
+getNumeroElementos(): int
+isVacia(): Boolean
+vaciar()
-add(s: ElementoLE<TipoDato>)
+add(o: TipoDato)
+insert(s: ElementoLE<TipoDato>, position: int)
+del(position: int): int
+getPosicion(el: ElementoLE<TipoDato>): int
+getPrimero(): ElementoLE<TipoDato>
+getUltimo(): ElementoLE<TipoDato>
+getSiguiente(el: ElementoLE<TipoDato>): ElementoLE<TipoDato>
+getElemento(position: int): ElementoLE<TipoDato>
}

ListaDoblementeEnlazada <-- ElementoLDE

class ElementoLDE{
-anterior: ElementoLDE<TipoDato>
-siguiente: ElementoLDE<TipoDato>
-data: TipoDato
#insertarmeEn(el: ElementoLDE<TipoDato>)
#getSiguiente():ElementoLDE<TipoDato>
#getAnterior(): ElementoLDE<TipoDato>
+getData(): TipoDato
+setData(data: TipoDato): TipoDato
}

class ListaDoblementeEnlazada{
-primero: ElementoLDE<TipoDato>
-ultimo: ElementoLDE<TipoDato>
+isVacia(): Boolean
+vaciar()
#add(el: ElementoLDE<TipoDato>)
+del(position: int): int
+getNumeroElementos(): int
+getPosicion(el: ElementoLDE<TipoDato>): int
+getPrimero(): ElementoLDE<TipoDato>
+getUltimo(): ElementoLDE<TipoDato>
+getSiguiente(el: ElementoLDE<TipoDato>): ElementoLDE<TipoDato>
+getAnterior(el: ElementoLDE<TipoDato>): ElementoLDE<TipoDato>
+getElemento(position: int): ElementoLDE<TipoDato>
}

GrafoOperaciones <-- IndividuoPruebaGrafo
GrafoOperaciones <-- verGrafo
GrafoOperaciones <-- Operacion
IndividuoPruebaGrafo <-- Operacion

class GrafoOperaciones{
-grafo: Map<String, String>
+GrafoOperaciones()
+addOperacionesIndividuo(individuo: IndividuoPruebaGrafo)
+construirGrafo(individuos: ListaDoblementeEnlazada)
+getGrafo(): Map<String, String>
}

class IndividuoPruebaGrafo{
-id: int
-generation: int
-lifeTurns: int
-reproductionProb: double
-cloneProb: double
-operaciones: ArrayList<Operacion>
+IndividuoPruebaGrafo(id: int, generation: int, lifeTurns: int, reproductionProb: double, cloneProb: double)
+addOperaciones(description: String, turn: int, type: int)
+getId(): int
+getOperaciones(): ArrayList<Operacion>
}

class verGrafo{
-grafo: Map<String, String>
+verGrafo(grafo: Map<String, String>)
#paintComponent(g: Graphics)
+visualizarGrafo(graph: Map<String, String>)
}

class Operacion{
-turno: int
-descripcion: int
-tipo: int
+Operacion(descripcion: String, turno: int, tipo: int)
+getDescripcion(): String
+getTurno(): int
+getTipo(): int
}

class EstructuraDeDatos{
-partida: Partida
+EstructuraDeDatos()
-individuoMasLongevo(): Individuo
-cantidadMutaciones(): int
-cantidadReproducciones(): int
-individuoConMasReproducciones(): Individuo
-individuoConMasMutaciones(): Individuo
-individuoMasAgua(): Individuo
-turnosVida(casilla: Casilla)
-individuoMasTiempoDeVida(): Individuo
-duracionIndividuoMasTiempoDeVida(): int
-comparaIndividuo(): Boolean
}

@enduml